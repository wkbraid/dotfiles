#!/usr/bin/perl

use strict;
use warnings;

use File::HomeDir;
use File::Basename;
use File::Copy qw(move);

my $home = File::HomeDir->my_home;
my $dotpath = "$home/.dotfiles";

my $commands = { # {{{
    'help' => {
        'desc' => 'Display this help information.',
        'usage' => 'Usage: dotfiles help [command]',
        'func' => \&help,
    },
    'add' => {
        'desc' => 'Begin tracking a file or directory.',
        'usage' => 'Usage: dotfiles add [bin | home] <file>',
        'func' => \&add,
    },
    'restore' => {
        'desc' => 'Stop tracking a file and restore it to the home directory.',
        'usage' => 'Usage: dotfiles restore [bin | home] <file>',
        'func' => \&restore,
    },
    'sync' => {
        'desc' => 'Pull and sync remote changes to the home directory.',
        'usage' => 'Usage: dotfiles sync',
        'func' => \&sync,
    },
    'install' => {
        'desc' => 'Run installation scripts, can be used with the --all option.',
        'usage' => 'Usage: dotfiles install [--all | <install-script>]',
        'func' => \&install,
    },
    'commit' => {
        'desc' => 'Commit changes to the underlying repository.',
        'usage' => 'Usage: dotfiles commit <message>',
        'func' => \&commit,
    },
    'pull' => {
        'desc' => 'Perform a git pull on the underlying repository.',
        'usage' => 'Usage: dotfiles pull',
        'func' => \&pull,
    },
    'push' => {
        'desc' => 'Performs a git push on the underlying repository.',
        'usage' => 'Usage: dotfiles push',
        'func' => \&push,
    },
    'git' => {
        'desc' => 'Shortcut to run arbitrary git commands on the underlying repository.',
        'usage' => 'Usage: dotfiles git [<args>...]',
        'func' => \&git,
    },
}; # }}}

sub main {
    my $args = scalar(@_);
    if ($args == 0) { help(); return }

    my $cmd = shift;
    $commands->{$cmd}{func}(@_);
}

sub query {
    my $question = shift;
    print "$question [Y/n] ";
    while() {
        my $response = <STDIN>;
        chomp $response;
        if ($response eq '' or $response eq 'y' or $response eq 'Y') {
            return 1;
        } elsif ($response eq 'n' or $response eq 'N') {
            return 0;
        }
        print "Please enter y or n: "; 
    }
}

sub help { # {{{
    my $args = scalar(@_);
    if ($args == 0) {
        print "Usage: dotfiles <command> [<arguments>]\n\n";

        print "Options:\n",
              "  -h --help      Display this help information.\n\n";

        print "Commands:\n";
        foreach my $cmd (sort keys %$commands) {
            printf "  %-20s%s\n", $cmd, $commands->{$cmd}{desc};
        }

        print "\nFor more information, see the README.\n";
    } elsif ($args == 1) {
        my $cmd = shift;
        printf "%s\n", $commands->{$cmd}{usage};
    } else {
        help('help');
    }
} # }}}

#= Dotfiles {{{ ===============================================================
sub add {
    if (scalar(@_) == 0) { return help('add') }

    my $context = 'home';
    my $file = shift;
    if ($file eq 'bin' or $file eq 'home') {
        $context = $file;
        if (scalar(@_) != 1) { return help('add') }
        $file = shift;
    }

    $file = basename($file);
    my $original = "$home/$context/$file";
    my $tracked = "$dotpath/$context/$file";

    if (-l $original) { die "Symlink already exists.\n"; }
    if ((not -f $original) and (not -d $original)) {
        die "Cannot find file or directory: $original\n"; }
    if ($original eq '/' or $original eq '..' or $original eq '.') {
        die "Invalid file name $original\n"; }
    
    if (-e $tracked) {
        print "Overwriting existing file $tracked\n";
        if (query()) {
            unlink $tracked or die "Unable to remove $tracked.\n";
        } else {
            die "Exiting...\n"; 
        }
    }

    move $original, $tracked or die "Unable to move $original to $tracked.\n";
    print "Linking $original => $tracked...\n";
    symlink $tracked, $original or die "Unable to link $original => $tracked.\n";
}

sub restore {
    if (scalar(@_) == 0) { help('add'); return; }
    
    my $context = 'home';
    my $file = shift; 
    if ($file eq 'bin' or $file eq 'home') {
        $context = $file;
        if (scalar(@_) != 0) { return help('add') }
        $file = shift;
    }

    $file = basename($file);
    my $original = $home . $file;
    my $tracked = "$dotpath/$context/$file";

    if (not -e $tracked) {
        die "Could not find file or directory: $tracked.\n"; }
    if (not -l $original) {
        die "The file $original is not a symlink.\n"; }
    
    print "Replacing linked $original with actual file $tracked...\n";
    unlink $original or die "Unable to remove $original.\n";
    move $tracked, $original or die "Unable to move $tracked to $original.\n";
    
}
# }}}

#= Configuration {{{ ==========================================================
sub sync {
    print "Checking for remote changes...\n";
    pull();

    opendir(my $DH, "$dotpath/home/") or die "Unable to oepn $dotpath/home/.\n";
    my @homefiles = readdir($DH);
    closedir($DH);
    foreach my $file (@homefiles) {
        next if ($file =~ /^\.+$/); #avoid . and ..
        my $tracked = "$dotpath/home/$file";
        my $original = "$home/$file";

        syncFile($tracked, $original);
    }

    opendir($DH, "$dotpath/bin/") or die "Unable to open $dotpath/bin/.\n";
    my @binfiles = readdir($DH);
    closedir($DH);
    foreach my $file (@binfiles) {
        next if ($file =~ /^\.+$/);
        my $tracked = "$dotpath/bin/$file";
        my $original = "$home/bin/$file";

        syncFile($tracked, $original);
    }
}

sub syncFile {
    my $tracked = shift;
    my $original = shift;

    print "Attempting to sync $tracked...\n";
    if (-l $original) {
        print "Link already exists at $original.\n"; return;
    } 
    if (-e $original) {
        if (query("File $original already exists. Overwrite?")) {
            print "Removing file $original...\n";
            unlink $original or die "Unable to remove $original.\n";
        }
    }

    print "Linking $original => $tracked...\n";
    symlink $tracked, $original or die "Unable to link $original => $tracked.\n"; 
}

sub install {
    if (scalar(@_) != 1) { return help('install'); }
    my $script = shift;
    if ($script eq '--all') {
        opendir(my $DH, "$dotpath/install/") or die "Unable to open $dotpath/install/.\n";
        my @files = readdir($DH);
        closedir($DH);
        foreach my $file (@files) {
            if (-f $file) {
                install(basename($file)) 
            }
        }
    } else {
        my $file = "$dotpath/scripts/$script";
        (-e $file) or die "File $file does not exist.\n";
        print "Executing $file...\n";
        system($file) or die "Error while executing $file.\n";
    }
}
# }}}

#= Git {{{ ====================================================================
sub commit {
    if (scalar(@_) == 1) {
        my $msg = shift;
        system("git", "-C", "$dotpath/", "add", ".");
        system("git", "-C", "$dotpath/", "commit", "-am", $msg);
    } else {
        help('commit');
    }
}

sub pull {
    my $args = scalar(@_);
    if ($args == 0) {
        system("git", "-C", "$dotpath/", "pull");
    } else {
        help('pull');
    }
}

sub push {
    my $args = scalar(@_);
    if ($args == 0) {
        system("git", "-C", "$dotpath/", "push");
    } else {
        help('push');
    }
}

sub git {
    system("git", "-C", "$dotpath/", @_);
}
# }}}

main(@ARGV);
